<?php

use PHPUnit\Framework\TestCase;
use PlacetoPay\GnuPG\GnuPG;

class GnuPGTest extends TestCase
{
    protected static $generatedPassPhrase = 'superSecretPhrase';
    private GnuPG $gpg;

    protected function setUp(): void
    {
        parent::setUp();
        mkdir(__DIR__.'/../build/keyring', 0700, true);
        $this->gpg = new GnuPG([
            'gpgExecutable' => getenv('GPG1_PATH'),
            'ringPath' => __DIR__.'/../build/keyring',
            'ignoreTimeConflict' => true,
        ]);
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $dir = __DIR__.'/../build/keyring';
        $it = new RecursiveDirectoryIterator($dir, FilesystemIterator::SKIP_DOTS);
        $it = new RecursiveIteratorIterator($it, RecursiveIteratorIterator::CHILD_FIRST);
        foreach ($it as $file) {
            if ($file->isDir()) {
                rmdir($file->getPathname());
            } else {
                unlink($file->getPathname());
            }
        }
        rmdir($dir);
    }

    public function testCreateKey()
    {
        $fingerprint = $this->gpg->genKey('TestCase', 'Used for unit test', 'testing@testing.com', self::$generatedPassPhrase, '5y');

        $this->assertNotFalse($fingerprint, $this->gpg->error());
        $this->assertIsString($fingerprint, 'Expecting the fingerprint after key creation');

        $keyData = $this->gpg->listKeys(GnuPG::KEY_KIND_SECRET, $fingerprint);

        $this->assertNotEmpty($keyData, $this->gpg->error());
        $this->assertEquals($fingerprint, $keyData[0]['Fingerprint'], 'Can not be vailidated the fingerprint');
        $this->assertStringContainsString('testing@testing.com', $keyData[0]['UserID'], 'Can not be recovered the created key');
    }

    public function testImportKey()
    {
        $imported = $this->gpg->import(file_get_contents(__DIR__.'/resources/keys/pgp.mit.edu.key'));

        $this->assertNotEmpty($imported, $this->gpg->error());
        $this->assertEquals('9D8F42CA4D5B925A90E7E909464B9930963B3E57', $imported[0]['UserID'], 'Expecting that the imported key');
    }

    public function testSignKey()
    {
        $this->markTestSkipped('Pending to finish');
        $this->gpg->import(file_get_contents(__DIR__.'/resources/keys/pgp.mit.edu.key'));
        $keyData = $this->gpg->listKeys();

        $signed = $this->gpg->signKey($keyData[0]['Fingerprint'], self::$generatedPassPhrase, $keyData[0]['KeyID'], GnuPG::CERT_LEVEL_FULL);
        $this->assertNotFalse($signed, $this->gpg->error());
    }

    public function testEncryptDecrypt()
    {
        $receiverPassPhrase = 'ReceiverPass';
        $message = 'This is a testing message';

        $receiverFingerprint = $this->gpg->genKey('Receiver TestCase', 'Used for unit test', 'third@party.com', $receiverPassPhrase, 30);

        $this->assertNotFalse($receiverFingerprint, $this->gpg->error());
        $this->assertIsString($receiverFingerprint, 'Expecting the fingerprint after key creation');

        $keys = $this->gpg->listKeys(GnuPG::KEY_KIND_PUBLIC, $receiverFingerprint);
        $this->assertNotEmpty($keys, $this->gpg->error());

        $receiverKey = $keys[0]['KeyID'];
        $encrypted = $this->gpg->encrypt($receiverKey, $receiverPassPhrase, $receiverKey, $message);
        $this->assertNotFalse($encrypted, $this->gpg->error());
        $this->assertNotEquals($message, $encrypted, 'Encryption error the encrypted message can not be the same that original message');

        $decrypted = $this->gpg->decrypt($receiverKey, $receiverPassPhrase, $encrypted);

        $this->assertNotFalse($decrypted, $this->gpg->error());
        $this->assertEquals($message, $decrypted, 'Error on decryption the expected message differs');

        $inputFile = tempnam(__DIR__, 'it');
        $outputFile = tempnam(__DIR__, 'ot');
        file_put_contents($inputFile, $message);

        $encrypted = $this->gpg->encryptFile($receiverKey, $receiverPassPhrase, $receiverKey, $inputFile, $outputFile);
        $this->assertNotFalse($encrypted, $this->gpg->error());
        $this->assertNotEquals($message, file_get_contents($outputFile), 'Encryption error the encrypted message can not be the same that original message');

        $decrypted = $this->gpg->decryptFile($receiverKey, $receiverPassPhrase, $outputFile, $inputFile);
        $this->assertNotFalse($decrypted, $this->gpg->error());
        $this->assertEquals($message, file_get_contents($inputFile), 'Error on decryption the expected message differs');
        unlink($inputFile);
        unlink($outputFile);

        // deletes the receiver created key
        $this->gpg->deleteKey($receiverFingerprint, GnuPG::KEY_KIND_SECRET);
        $this->gpg->deleteKey($receiverKey, GnuPG::KEY_KIND_PUBLIC);
    }

    public function testListKeys()
    {
        $this->gpg->genKey('TestCase', 'Used for unit test', 'testing@testing.com', self::$generatedPassPhrase, '5y');
        $keys = $this->gpg->listKeys(GnuPG::KEY_KIND_SECRET);
        $this->assertEquals(1, count($keys), 'Invalid the list of secret keys');

        $this->gpg->genKey('TestCase', 'Used for unit test', 'testing@testing.com', self::$generatedPassPhrase, '5y');
        $keys = $this->gpg->listKeys(GnuPG::KEY_KIND_PUBLIC);
        $this->assertEquals(2, count($keys), 'Invalid the list of public keys');
    }

    public function testDeleteKeys()
    {
        $fingerprint = $this->gpg->genKey('TestCase', 'Used for unit test', 'testing@testing.com', self::$generatedPassPhrase, '5y');
        $deleted = $this->gpg->deleteKey($fingerprint, GnuPG::KEY_KIND_SECRET);

        $this->assertTrue($deleted, $this->gpg->error());
        $keys = $this->gpg->listKeys();

        $deleted = $this->gpg->deleteKey($keys[0]['KeyID'], GnuPG::KEY_KIND_PUBLIC);
        $this->assertTrue($deleted, $this->gpg->error());

        $imported = $this->gpg->import(file_get_contents(__DIR__.'/resources/keys/pgp.mit.edu.key'));
        $deleted = $this->gpg->deleteKey($imported[0]['KeyID'], GnuPG::KEY_KIND_PUBLIC);
        $this->assertTrue($deleted, $this->gpg->error());
    }
}
